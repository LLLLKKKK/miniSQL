!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BOOST_AUTO_TEST_CASE	test/nfa_test.cpp	/^BOOST_AUTO_TEST_CASE( accept1 ) {$/;"	f	signature:( accept1 )
BOOST_AUTO_TEST_CASE	test/nfa_test.cpp	/^BOOST_AUTO_TEST_CASE( refuse1 ) {$/;"	f	signature:( refuse1 )
BOOST_AUTO_TEST_CASE	test/scanner_test.cpp	/^BOOST_AUTO_TEST_CASE( complexTest ) $/;"	f	signature:( complexTest )
BOOST_AUTO_TEST_CASE	test/scanner_test.cpp	/^BOOST_AUTO_TEST_CASE( speedTest ) $/;"	f	signature:( speedTest )
BOOST_TEST_DYN_LINK	test/test_main.cpp	3;"	d	file:
BOOST_TEST_MAIN	test/test_main.cpp	2;"	d	file:
BOOST_TEST_MODEL	test/test_main.cpp	1;"	d	file:
BUILDDIR	Makefile	/^BUILDDIR := build$/;"	m
CC	Makefile	/^CC := g++$/;"	m
CHAR	src/token.hpp	/^	CHAR,$/;"	e	enum:Token
CREATE	src/token.hpp	/^	CREATE,$/;"	e	enum:Token
CXXFLAGS	Makefile	/^CXXFLAGS := -std=c++0x -Wall -O2$/;"	m
DEBUG	src/logger.hpp	/^		DEBUG,$/;"	e	enum:Logger::LogLevel
DELETE	src/token.hpp	/^	DELETE,$/;"	e	enum:Token
DEPS	Makefile	/^DEPS := $(OBJECTS:.o=.d)$/;"	m
EQUAL	src/token.hpp	/^	EQUAL,$/;"	e	enum:Token
ERROR	src/logger.hpp	/^		ERROR,$/;"	e	enum:Logger::LogLevel
ERROR	src/token.hpp	/^	ERROR,$/;"	e	enum:Token
FIRST_TOKEN	src/token.hpp	/^	FIRST_TOKEN = CREATE,$/;"	e	enum:Token
FLOAT	src/token.hpp	/^	FLOAT,$/;"	e	enum:Token
FROM	src/token.hpp	/^	FROM,$/;"	e	enum:Token
GREATER	src/token.hpp	/^	GREATER,$/;"	e	enum:Token
GREATER_EQUAL	src/token.hpp	/^	GREATER_EQUAL,$/;"	e	enum:Token
GetCharNum	src/scanner.cpp	/^int InputHandler::GetCharNum() const$/;"	f	class:InputHandler	signature:() const
GetCharNum	src/scanner.hpp	/^	int GetCharNum() const;$/;"	p	class:InputHandler	access:public	signature:() const
GetLineNum	src/scanner.cpp	/^int InputHandler::GetLineNum() const $/;"	f	class:InputHandler	signature:() const
GetLineNum	src/scanner.hpp	/^	int GetLineNum() const;$/;"	p	class:InputHandler	access:public	signature:() const
IDENTIFIER	src/token.hpp	/^	IDENTIFIER,$/;"	e	enum:Token
INDEX	src/token.hpp	/^	INDEX,$/;"	e	enum:Token
INFO	src/logger.hpp	/^		INFO$/;"	e	enum:Logger::LogLevel
INSERT	src/token.hpp	/^	INSERT,$/;"	e	enum:Token
INTEGER	src/token.hpp	/^	INTEGER,$/;"	e	enum:Token
InputHandler	src/scanner.cpp	/^InputHandler::InputHandler(const char* filename)$/;"	f	class:InputHandler	signature:(const char* filename)
InputHandler	src/scanner.hpp	/^	InputHandler(const char* filename);$/;"	p	class:InputHandler	access:public	signature:(const char* filename)
InputHandler	src/scanner.hpp	/^class InputHandler $/;"	c
InputHandler::GetCharNum	src/scanner.cpp	/^int InputHandler::GetCharNum() const$/;"	f	class:InputHandler	signature:() const
InputHandler::GetCharNum	src/scanner.hpp	/^	int GetCharNum() const;$/;"	p	class:InputHandler	access:public	signature:() const
InputHandler::GetLineNum	src/scanner.cpp	/^int InputHandler::GetLineNum() const $/;"	f	class:InputHandler	signature:() const
InputHandler::GetLineNum	src/scanner.hpp	/^	int GetLineNum() const;$/;"	p	class:InputHandler	access:public	signature:() const
InputHandler::InputHandler	src/scanner.cpp	/^InputHandler::InputHandler(const char* filename)$/;"	f	class:InputHandler	signature:(const char* filename)
InputHandler::InputHandler	src/scanner.hpp	/^	InputHandler(const char* filename);$/;"	p	class:InputHandler	access:public	signature:(const char* filename)
InputHandler::charNum	src/scanner.hpp	/^	int charNum;$/;"	m	class:InputHandler	access:private
InputHandler::inputFile	src/scanner.hpp	/^	ifstream inputFile;$/;"	m	class:InputHandler	access:private
InputHandler::lineBuffer	src/scanner.hpp	/^	string lineBuffer;$/;"	m	class:InputHandler	access:private
InputHandler::lineNum	src/scanner.hpp	/^	int lineNum;$/;"	m	class:InputHandler	access:private
InputHandler::next	src/scanner.cpp	/^char InputHandler::next()$/;"	f	class:InputHandler	signature:()
InputHandler::next	src/scanner.hpp	/^	char next();$/;"	p	class:InputHandler	access:public	signature:()
KEY	src/token.hpp	/^	KEY,$/;"	e	enum:Token
LAST_TOKEN	src/token.hpp	/^	LAST_TOKEN = ERROR$/;"	e	enum:Token
LEFT_BRACE	src/token.hpp	/^	LEFT_BRACE,$/;"	e	enum:Token
LESS	src/token.hpp	/^	LESS,$/;"	e	enum:Token
LESS_EQUAL	src/token.hpp	/^	LESS_EQUAL,$/;"	e	enum:Token
LOGGER_HPP	src/logger.hpp	3;"	d
LogLevel	src/logger.hpp	/^	enum LogLevel$/;"	g	class:Logger	access:public
Logger	src/logger.cpp	/^Logger::Logger(const string& name)$/;"	f	class:Logger	signature:(const string& name)
Logger	src/logger.hpp	/^	Logger(const string&);$/;"	p	class:Logger	access:private	signature:(const string&)
Logger	src/logger.hpp	/^class Logger$/;"	c
Logger	src/scanner.hpp	/^class Logger;$/;"	x
Logger::DEBUG	src/logger.hpp	/^		DEBUG,$/;"	e	enum:Logger::LogLevel
Logger::ERROR	src/logger.hpp	/^		ERROR,$/;"	e	enum:Logger::LogLevel
Logger::INFO	src/logger.hpp	/^		INFO$/;"	e	enum:Logger::LogLevel
Logger::LogLevel	src/logger.hpp	/^	enum LogLevel$/;"	g	class:Logger	access:public
Logger::Logger	src/logger.cpp	/^Logger::Logger(const string& name)$/;"	f	class:Logger	signature:(const string& name)
Logger::Logger	src/logger.hpp	/^	Logger(const string&);$/;"	p	class:Logger	access:private	signature:(const string&)
Logger::error	src/logger.cpp	/^void Logger::error(const char* format, ... )$/;"	f	class:Logger	signature:(const char* format, ... )
Logger::error	src/logger.hpp	/^	void error(const char* format, ... );$/;"	p	class:Logger	access:public	signature:(const char* format, ... )
Logger::getLogger	src/logger.cpp	/^Logger* Logger::getLogger(const string& name)$/;"	f	class:Logger	signature:(const string& name)
Logger::getLogger	src/logger.hpp	/^	static Logger* getLogger(const string& name);$/;"	p	class:Logger	access:public	signature:(const string& name)
Logger::log	src/logger.cpp	/^void Logger::log(LogLevel level, const char* format, ... )$/;"	f	class:Logger	signature:(LogLevel level, const char* format, ... )
Logger::log	src/logger.hpp	/^	void log(LogLevel level, const char* format, ... );$/;"	p	class:Logger	access:public	signature:(LogLevel level, const char* format, ... )
Logger::loggers	src/logger.cpp	/^map<string, Logger*> Logger::loggers;$/;"	m	class:Logger	file:
Logger::loggers	src/logger.hpp	/^	static map<string, Logger*> loggers;$/;"	m	class:Logger	access:private
Logger::name	src/logger.hpp	/^	string name;$/;"	m	class:Logger	access:private
Logger::~Logger	src/logger.cpp	/^Logger::~Logger()$/;"	f	class:Logger	signature:()
Logger::~Logger	src/logger.hpp	/^	~Logger();$/;"	p	class:Logger	access:private	signature:()
NFA	src/nfa.cpp	/^NFA::NFA()$/;"	f	class:NFA	signature:()
NFA	src/nfa.hpp	/^		NFA();$/;"	p	class:NFA	access:public	signature:()
NFA	src/nfa.hpp	/^class NFA$/;"	c
NFA	src/scanner.hpp	/^class NFA;$/;"	x
NFA::NFA	src/nfa.cpp	/^NFA::NFA()$/;"	f	class:NFA	signature:()
NFA::NFA	src/nfa.hpp	/^		NFA();$/;"	p	class:NFA	access:public	signature:()
NFA::accept	src/nfa.cpp	/^Token NFA::accept()$/;"	f	class:NFA	signature:()
NFA::accept	src/nfa.hpp	/^		Token accept();$/;"	p	class:NFA	access:public	signature:()
NFA::add	src/nfa.cpp	/^void NFA::add(const char *str, Token token)$/;"	f	class:NFA	signature:(const char *str, Token token)
NFA::add	src/nfa.hpp	/^		void add(const char* str, Token token);$/;"	p	class:NFA	access:public	signature:(const char* str, Token token)
NFA::candidate	src/nfa.hpp	/^		vector<const char*> candidate;$/;"	m	class:NFA	access:private
NFA::enter	src/nfa.cpp	/^bool NFA::enter(char c)$/;"	f	class:NFA	signature:(char c)
NFA::enter	src/nfa.hpp	/^		bool enter(char c);$/;"	p	class:NFA	access:public	signature:(char c)
NFA::init	src/nfa.cpp	/^void NFA::init()$/;"	f	class:NFA	signature:()
NFA::init	src/nfa.hpp	/^		void init();$/;"	p	class:NFA	access:public	signature:()
NFA::posNow	src/nfa.hpp	/^		int posNow;$/;"	m	class:NFA	access:private
NFA::strings	src/nfa.hpp	/^		vector<const char*> strings;$/;"	m	class:NFA	access:private
NFA::tmp	src/nfa.hpp	/^		vector<const char*> tmp;$/;"	m	class:NFA	access:private
NFA::tokenMap	src/nfa.hpp	/^		map<const char*, Token> tokenMap;$/;"	m	class:NFA	access:private
NFA::trans	src/nfa.cpp	/^bool NFA::trans(char c)$/;"	f	class:NFA	signature:(char c)
NFA::trans	src/nfa.hpp	/^		bool trans(char c);$/;"	p	class:NFA	access:public	signature:(char c)
NFA::~NFA	src/nfa.cpp	/^NFA::~NFA()$/;"	f	class:NFA	signature:()
NFA::~NFA	src/nfa.hpp	/^		~NFA();$/;"	p	class:NFA	access:public	signature:()
NFA_HPP	src/nfa.hpp	3;"	d
NOT_EQUAL	src/token.hpp	/^	NOT_EQUAL,$/;"	e	enum:Token
NULLTOKEN	src/token.hpp	/^	NULLTOKEN,$/;"	e	enum:Token
OBJECTS	Makefile	/^OBJECTS := $(patsubst $(SRCDIR)\/%,$(BUILDDIR)\/%,$(SOURCES:.$(SRCEXT)=.o))$/;"	m
ON	src/token.hpp	/^	ON,$/;"	e	enum:Token
PRIMARY	src/token.hpp	/^	PRIMARY,$/;"	e	enum:Token
QUIT	src/token.hpp	/^	QUIT,$/;"	e	enum:Token
RIGHT_BRACE	src/token.hpp	/^	RIGHT_BRACE,$/;"	e	enum:Token
SCANNER_HPP	src/scanner.hpp	3;"	d
SELECT	src/token.hpp	/^	SELECT,$/;"	e	enum:Token
SLICE	src/token.hpp	/^	SLICE,$/;"	e	enum:Token
SOURCES	Makefile	/^SOURCES := $(shell find $(SRCDIR) -type f -name '*.$(SRCEXT)')$/;"	m
SQLScanner	src/scanner.cpp	/^SQLScanner::SQLScanner(const char* filename)$/;"	f	class:SQLScanner	signature:(const char* filename)
SQLScanner	src/scanner.hpp	/^	SQLScanner(const char* filename);$/;"	p	class:SQLScanner	access:public	signature:(const char* filename)
SQLScanner	src/scanner.hpp	/^class SQLScanner {$/;"	c
SQLScanner::SQLScanner	src/scanner.cpp	/^SQLScanner::SQLScanner(const char* filename)$/;"	f	class:SQLScanner	signature:(const char* filename)
SQLScanner::SQLScanner	src/scanner.hpp	/^	SQLScanner(const char* filename);$/;"	p	class:SQLScanner	access:public	signature:(const char* filename)
SQLScanner::appendSubsequentAlpha	src/scanner.cpp	/^void SQLScanner::appendSubsequentAlpha()$/;"	f	class:SQLScanner	signature:()
SQLScanner::appendSubsequentAlpha	src/scanner.hpp	/^	void appendSubsequentAlpha();$/;"	p	class:SQLScanner	access:private	signature:()
SQLScanner::appendSubsequentDigits	src/scanner.cpp	/^void SQLScanner::appendSubsequentDigits()$/;"	f	class:SQLScanner	signature:()
SQLScanner::appendSubsequentDigits	src/scanner.hpp	/^	void appendSubsequentDigits();$/;"	p	class:SQLScanner	access:private	signature:()
SQLScanner::getTokenBuffer	src/scanner.cpp	/^const char* SQLScanner::getTokenBuffer() const$/;"	f	class:SQLScanner	signature:() const
SQLScanner::getTokenBuffer	src/scanner.hpp	/^	const char* getTokenBuffer() const;$/;"	p	class:SQLScanner	access:public	signature:() const
SQLScanner::input	src/scanner.hpp	/^	InputHandler *input;$/;"	m	class:SQLScanner	access:private
SQLScanner::isAlphaNow	src/scanner.cpp	/^bool SQLScanner::isAlphaNow() const$/;"	f	class:SQLScanner	signature:() const
SQLScanner::isAlphaNow	src/scanner.hpp	/^	bool isAlphaNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
SQLScanner::isEndOfInputNow	src/scanner.cpp	/^bool SQLScanner::isEndOfInputNow() const$/;"	f	class:SQLScanner	signature:() const
SQLScanner::isEndOfInputNow	src/scanner.hpp	/^	bool isEndOfInputNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
SQLScanner::isNegativeOrDigitsNow	src/scanner.cpp	/^bool SQLScanner::isNegativeOrDigitsNow() const$/;"	f	class:SQLScanner	signature:() const
SQLScanner::isNegativeOrDigitsNow	src/scanner.hpp	/^	bool isNegativeOrDigitsNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
SQLScanner::isOperatorNow	src/scanner.cpp	/^bool SQLScanner::isOperatorNow() const$/;"	f	class:SQLScanner	signature:() const
SQLScanner::isOperatorNow	src/scanner.hpp	/^	bool isOperatorNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
SQLScanner::isQuoteNow	src/scanner.cpp	/^bool SQLScanner::isQuoteNow() const$/;"	f	class:SQLScanner	signature:() const
SQLScanner::isQuoteNow	src/scanner.hpp	/^	bool isQuoteNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
SQLScanner::isSpaceNow	src/scanner.cpp	/^bool SQLScanner::isSpaceNow() const$/;"	f	class:SQLScanner	signature:() const
SQLScanner::isSpaceNow	src/scanner.hpp	/^	bool isSpaceNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
SQLScanner::isTerminator	src/scanner.cpp	/^bool SQLScanner::isTerminator() const$/;"	f	class:SQLScanner	signature:() const
SQLScanner::isTerminator	src/scanner.hpp	/^	bool isTerminator() const;$/;"	p	class:SQLScanner	access:private	signature:() const
SQLScanner::logger	src/scanner.hpp	/^	Logger* logger;$/;"	m	class:SQLScanner	access:private
SQLScanner::nextChar	src/scanner.cpp	/^void SQLScanner::nextChar()$/;"	f	class:SQLScanner	signature:()
SQLScanner::nextChar	src/scanner.hpp	/^	void nextChar();$/;"	p	class:SQLScanner	access:private	signature:()
SQLScanner::nextNonWhitespaceChar	src/scanner.cpp	/^void SQLScanner::nextNonWhitespaceChar()$/;"	f	class:SQLScanner	signature:()
SQLScanner::nextNonWhitespaceChar	src/scanner.hpp	/^	void nextNonWhitespaceChar();$/;"	p	class:SQLScanner	access:private	signature:()
SQLScanner::nextToken	src/scanner.cpp	/^Token SQLScanner::nextToken()$/;"	f	class:SQLScanner	signature:()
SQLScanner::nextToken	src/scanner.hpp	/^	Token nextToken();$/;"	p	class:SQLScanner	access:public	signature:()
SQLScanner::nfa	src/scanner.hpp	/^	NFA* nfa;$/;"	m	class:SQLScanner	access:private
SQLScanner::nowChar	src/scanner.hpp	/^	char nowChar;$/;"	m	class:SQLScanner	access:private
SQLScanner::scan	src/scanner.cpp	/^void SQLScanner::scan()$/;"	f	class:SQLScanner	signature:()
SQLScanner::scan	src/scanner.hpp	/^	void scan();$/;"	p	class:SQLScanner	access:public	signature:()
SQLScanner::scanChar	src/scanner.cpp	/^void SQLScanner::scanChar()$/;"	f	class:SQLScanner	signature:()
SQLScanner::scanChar	src/scanner.hpp	/^	void scanChar();$/;"	p	class:SQLScanner	access:private	signature:()
SQLScanner::scanIdentifier	src/scanner.cpp	/^void SQLScanner::scanIdentifier()$/;"	f	class:SQLScanner	signature:()
SQLScanner::scanIdentifier	src/scanner.hpp	/^	void scanIdentifier();$/;"	p	class:SQLScanner	access:private	signature:()
SQLScanner::scanNumber	src/scanner.cpp	/^void SQLScanner::scanNumber()$/;"	f	class:SQLScanner	signature:()
SQLScanner::scanNumber	src/scanner.hpp	/^	void scanNumber();$/;"	p	class:SQLScanner	access:private	signature:()
SQLScanner::scanOperator	src/scanner.cpp	/^void SQLScanner::scanOperator()$/;"	f	class:SQLScanner	signature:()
SQLScanner::scanOperator	src/scanner.hpp	/^	void scanOperator();$/;"	p	class:SQLScanner	access:private	signature:()
SQLScanner::token	src/scanner.hpp	/^	Token token;$/;"	m	class:SQLScanner	access:private
SQLScanner::tokenBuffer	src/scanner.hpp	/^	string tokenBuffer;$/;"	m	class:SQLScanner	access:private
SQLScanner::~SQLScanner	src/scanner.cpp	/^SQLScanner::~SQLScanner()$/;"	f	class:SQLScanner	signature:()
SQLScanner::~SQLScanner	src/scanner.hpp	/^	~SQLScanner();$/;"	p	class:SQLScanner	access:public	signature:()
SRCDIR	Makefile	/^SRCDIR := src$/;"	m
SRCEXT	Makefile	/^SRCEXT := cpp$/;"	m
STAR	src/token.hpp	/^	STAR,$/;"	e	enum:Token
TABLE	src/token.hpp	/^	TABLE,$/;"	e	enum:Token
TARGET	Makefile	/^TARGET := test_main$/;"	m
TERMINATOR	src/token.hpp	/^	TERMINATOR,$/;"	e	enum:Token
TOKEN_HPP	src/token.hpp	2;"	d
Token	src/token.hpp	/^enum Token$/;"	g
VALUES	src/token.hpp	/^	VALUES,$/;"	e	enum:Token
WHERE	src/token.hpp	/^	WHERE,$/;"	e	enum:Token
accept	src/nfa.cpp	/^Token NFA::accept()$/;"	f	class:NFA	signature:()
accept	src/nfa.hpp	/^		Token accept();$/;"	p	class:NFA	access:public	signature:()
add	src/nfa.cpp	/^void NFA::add(const char *str, Token token)$/;"	f	class:NFA	signature:(const char *str, Token token)
add	src/nfa.hpp	/^		void add(const char* str, Token token);$/;"	p	class:NFA	access:public	signature:(const char* str, Token token)
add	src/scanner.cpp	/^		nfa->add(tokenStr[i], (Token)i);$/;"	p	file:	signature:(tokenStr[i], (Token)i)
appendSubsequentAlpha	src/scanner.cpp	/^void SQLScanner::appendSubsequentAlpha()$/;"	f	class:SQLScanner	signature:()
appendSubsequentAlpha	src/scanner.hpp	/^	void appendSubsequentAlpha();$/;"	p	class:SQLScanner	access:private	signature:()
appendSubsequentDigits	src/scanner.cpp	/^void SQLScanner::appendSubsequentDigits()$/;"	f	class:SQLScanner	signature:()
appendSubsequentDigits	src/scanner.hpp	/^	void appendSubsequentDigits();$/;"	p	class:SQLScanner	access:private	signature:()
args	src/logger.cpp	/^	va_list args;$/;"	l
candidate	src/nfa.hpp	/^		vector<const char*> candidate;$/;"	m	class:NFA	access:private
charNum	src/scanner.hpp	/^	int charNum;$/;"	m	class:InputHandler	access:private
clear	src/nfa.cpp	/^		tmp.clear();$/;"	p	file:	signature:()
clear	src/nfa.cpp	/^	candidate.clear();$/;"	p	file:	signature:()
clear	src/nfa.cpp	/^	tmp.clear();$/;"	p	file:	signature:()
clear	src/scanner.cpp	/^	tokenBuffer.clear();$/;"	p	file:	signature:()
count	test/scanner_test.cpp	/^	int count = 0;$/;"	l
dur_ms	test/scanner_test.cpp	/^  boost::posix_time::time_duration dur_ms = stop_time - start_time;$/;"	l
enter	src/nfa.cpp	/^bool NFA::enter(char c)$/;"	f	class:NFA	signature:(char c)
enter	src/nfa.hpp	/^		bool enter(char c);$/;"	p	class:NFA	access:public	signature:(char c)
error	src/logger.cpp	/^void Logger::error(const char* format, ... )$/;"	f	class:Logger	signature:(const char* format, ... )
error	src/logger.hpp	/^	void error(const char* format, ... );$/;"	p	class:Logger	access:public	signature:(const char* format, ... )
getLogger	src/logger.cpp	/^Logger* Logger::getLogger(const string& name)$/;"	f	class:Logger	signature:(const string& name)
getLogger	src/logger.hpp	/^	static Logger* getLogger(const string& name);$/;"	p	class:Logger	access:public	signature:(const string& name)
getTokenBuffer	src/scanner.cpp	/^const char* SQLScanner::getTokenBuffer() const$/;"	f	class:SQLScanner	signature:() const
getTokenBuffer	src/scanner.hpp	/^	const char* getTokenBuffer() const;$/;"	p	class:SQLScanner	access:public	signature:() const
getline	src/scanner.cpp	/^		std::getline(inputFile, lineBuffer);$/;"	p	class:std	file:	signature:(inputFile, lineBuffer)
getline	src/scanner.cpp	/^	std::getline(inputFile, lineBuffer);$/;"	p	class:std	file:	signature:(inputFile, lineBuffer)
init	src/nfa.cpp	/^void NFA::init()$/;"	f	class:NFA	signature:()
init	src/nfa.hpp	/^		void init();$/;"	p	class:NFA	access:public	signature:()
init	src/scanner.cpp	/^	nfa->init();$/;"	p	file:	signature:()
init	test/nfa_test.cpp	/^	nfa.init();$/;"	p	file:	signature:()
input	src/scanner.hpp	/^	InputHandler *input;$/;"	m	class:SQLScanner	access:private
inputFile	src/scanner.hpp	/^	ifstream inputFile;$/;"	m	class:InputHandler	access:private
isAlphaNow	src/scanner.cpp	/^bool SQLScanner::isAlphaNow() const$/;"	f	class:SQLScanner	signature:() const
isAlphaNow	src/scanner.hpp	/^	bool isAlphaNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
isEndOfInputNow	src/scanner.cpp	/^bool SQLScanner::isEndOfInputNow() const$/;"	f	class:SQLScanner	signature:() const
isEndOfInputNow	src/scanner.hpp	/^	bool isEndOfInputNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
isNegativeOrDigitsNow	src/scanner.cpp	/^bool SQLScanner::isNegativeOrDigitsNow() const$/;"	f	class:SQLScanner	signature:() const
isNegativeOrDigitsNow	src/scanner.hpp	/^	bool isNegativeOrDigitsNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
isOperatorNow	src/scanner.cpp	/^bool SQLScanner::isOperatorNow() const$/;"	f	class:SQLScanner	signature:() const
isOperatorNow	src/scanner.hpp	/^	bool isOperatorNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
isQuoteNow	src/scanner.cpp	/^bool SQLScanner::isQuoteNow() const$/;"	f	class:SQLScanner	signature:() const
isQuoteNow	src/scanner.hpp	/^	bool isQuoteNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
isSpaceNow	src/scanner.cpp	/^bool SQLScanner::isSpaceNow() const$/;"	f	class:SQLScanner	signature:() const
isSpaceNow	src/scanner.hpp	/^	bool isSpaceNow() const;$/;"	p	class:SQLScanner	access:private	signature:() const
isTerminator	src/scanner.cpp	/^bool SQLScanner::isTerminator() const$/;"	f	class:SQLScanner	signature:() const
isTerminator	src/scanner.hpp	/^	bool isTerminator() const;$/;"	p	class:SQLScanner	access:private	signature:() const
it	src/logger.cpp	/^	auto it = loggers.find(name);$/;"	l
lineBuffer	src/scanner.hpp	/^	string lineBuffer;$/;"	m	class:InputHandler	access:private
lineNum	src/scanner.hpp	/^	int lineNum;$/;"	m	class:InputHandler	access:private
log	src/logger.cpp	/^void Logger::log(LogLevel level, const char* format, ... )$/;"	f	class:Logger	signature:(LogLevel level, const char* format, ... )
log	src/logger.hpp	/^	void log(LogLevel level, const char* format, ... );$/;"	p	class:Logger	access:public	signature:(LogLevel level, const char* format, ... )
logger	src/logger.cpp	/^	Logger* logger;$/;"	l
logger	src/scanner.hpp	/^	Logger* logger;$/;"	m	class:SQLScanner	access:private
loggers	src/logger.cpp	/^map<string, Logger*> Logger::loggers;$/;"	m	class:Logger	file:
loggers	src/logger.hpp	/^	static map<string, Logger*> loggers;$/;"	m	class:Logger	access:private
name	src/logger.hpp	/^	string name;$/;"	m	class:Logger	access:private
next	src/scanner.cpp	/^char InputHandler::next()$/;"	f	class:InputHandler	signature:()
next	src/scanner.hpp	/^	char next();$/;"	p	class:InputHandler	access:public	signature:()
nextChar	src/scanner.cpp	/^void SQLScanner::nextChar()$/;"	f	class:SQLScanner	signature:()
nextChar	src/scanner.hpp	/^	void nextChar();$/;"	p	class:SQLScanner	access:private	signature:()
nextNonWhitespaceChar	src/scanner.cpp	/^void SQLScanner::nextNonWhitespaceChar()$/;"	f	class:SQLScanner	signature:()
nextNonWhitespaceChar	src/scanner.hpp	/^	void nextNonWhitespaceChar();$/;"	p	class:SQLScanner	access:private	signature:()
nextToken	src/scanner.cpp	/^Token SQLScanner::nextToken()$/;"	f	class:SQLScanner	signature:()
nextToken	src/scanner.hpp	/^	Token nextToken();$/;"	p	class:SQLScanner	access:public	signature:()
nfa	src/scanner.hpp	/^	NFA* nfa;$/;"	m	class:SQLScanner	access:private
nfa	test/nfa_test.cpp	/^	NFA nfa;$/;"	l
nowChar	src/scanner.hpp	/^	char nowChar;$/;"	m	class:SQLScanner	access:private
open	src/scanner.cpp	/^	inputFile.open(filename, std::ifstream::in);$/;"	p	file:	signature:(filename, std::ifstream::in)
posNow	src/nfa.hpp	/^		int posNow;$/;"	m	class:NFA	access:private
push_back	src/nfa.cpp	/^				tmp.push_back(strNow);$/;"	p	file:	signature:(strNow)
push_back	src/nfa.cpp	/^	strings.push_back(str);$/;"	p	file:	signature:(str)
push_back	src/scanner.cpp	/^			tokenBuffer.push_back(nowChar);$/;"	p	file:	signature:(nowChar)
push_back	src/scanner.cpp	/^		tokenBuffer.push_back(nowChar);$/;"	p	file:	signature:(nowChar)
push_back	src/scanner.cpp	/^	tokenBuffer.push_back(nowChar);$/;"	p	file:	signature:(nowChar)
scan	src/scanner.cpp	/^void SQLScanner::scan()$/;"	f	class:SQLScanner	signature:()
scan	src/scanner.hpp	/^	void scan();$/;"	p	class:SQLScanner	access:public	signature:()
scanChar	src/scanner.cpp	/^void SQLScanner::scanChar()$/;"	f	class:SQLScanner	signature:()
scanChar	src/scanner.hpp	/^	void scanChar();$/;"	p	class:SQLScanner	access:private	signature:()
scanIdentifier	src/scanner.cpp	/^void SQLScanner::scanIdentifier()$/;"	f	class:SQLScanner	signature:()
scanIdentifier	src/scanner.hpp	/^	void scanIdentifier();$/;"	p	class:SQLScanner	access:private	signature:()
scanNumber	src/scanner.cpp	/^void SQLScanner::scanNumber()$/;"	f	class:SQLScanner	signature:()
scanNumber	src/scanner.hpp	/^	void scanNumber();$/;"	p	class:SQLScanner	access:private	signature:()
scanOperator	src/scanner.cpp	/^void SQLScanner::scanOperator()$/;"	f	class:SQLScanner	signature:()
scanOperator	src/scanner.hpp	/^	void scanOperator();$/;"	p	class:SQLScanner	access:private	signature:()
start_time	test/scanner_test.cpp	/^  boost::posix_time::ptime start_time =$/;"	l
std::getline	src/scanner.cpp	/^		std::getline(inputFile, lineBuffer);$/;"	p	class:std	file:	signature:(inputFile, lineBuffer)
std::getline	src/scanner.cpp	/^	std::getline(inputFile, lineBuffer);$/;"	p	class:std	file:	signature:(inputFile, lineBuffer)
stop_time	test/scanner_test.cpp	/^  boost::posix_time::ptime stop_time =$/;"	l
strNow	src/nfa.cpp	/^			const char* strNow = candidate[i];$/;"	l
strings	src/nfa.hpp	/^		vector<const char*> strings;$/;"	m	class:NFA	access:private
student	test/fixture/complex_test.sql	/^create table student ( sno char(8), sage int, primary key (sage));$/;"	t
student.sage	test/fixture/complex_test.sql	/^create table student ( sno char(8), sage int, primary key (sage));$/;"	F
student.sno	test/fixture/complex_test.sql	/^create table student ( sno char(8), sage int, primary key (sage));$/;"	F
student.ssindex	test/fixture/complex_test.sql	/^create index ssindex on student ( sno );$/;"	i
swap	src/nfa.cpp	/^		tmp.swap(candidate);$/;"	p	file:	signature:(candidate)
test_SOURCES	Makefile	/^test_SOURCES := $(shell find $(test_SRCDIR) -type f -name '*.$(SRCEXT)')$/;"	m
test_SRCDIR	Makefile	/^test_SRCDIR := test$/;"	m
tmp	src/nfa.hpp	/^		vector<const char*> tmp;$/;"	m	class:NFA	access:private
token	src/scanner.hpp	/^	Token token;$/;"	m	class:SQLScanner	access:private
token	test/scanner_test.cpp	/^	Token token = scanner.nextToken();$/;"	l
tokenBuffer	src/scanner.hpp	/^	string tokenBuffer;$/;"	m	class:SQLScanner	access:private
tokenMap	src/nfa.hpp	/^		map<const char*, Token> tokenMap;$/;"	m	class:NFA	access:private
tokenStr	src/token.cpp	/^const char* tokenStr[] = {$/;"	v
tokenStr	src/token.hpp	/^extern const char* tokenStr[];$/;"	x
trans	src/nfa.cpp	/^bool NFA::trans(char c)$/;"	f	class:NFA	signature:(char c)
trans	src/nfa.hpp	/^		bool trans(char c);$/;"	p	class:NFA	access:public	signature:(char c)
~Logger	src/logger.cpp	/^Logger::~Logger()$/;"	f	class:Logger	signature:()
~Logger	src/logger.hpp	/^	~Logger();$/;"	p	class:Logger	access:private	signature:()
~NFA	src/nfa.cpp	/^NFA::~NFA()$/;"	f	class:NFA	signature:()
~NFA	src/nfa.hpp	/^		~NFA();$/;"	p	class:NFA	access:public	signature:()
~SQLScanner	src/scanner.cpp	/^SQLScanner::~SQLScanner()$/;"	f	class:SQLScanner	signature:()
~SQLScanner	src/scanner.hpp	/^	~SQLScanner();$/;"	p	class:SQLScanner	access:public	signature:()
